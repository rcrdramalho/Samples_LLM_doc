import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * BouncingBallAnimation - Creates a window with a ball bouncing inside a square panel
 */
public class BouncingBallAnimation {

    // Main method to start the application
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Bouncing Ball");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(400, 400);
            
            // Create and add the bouncing ball panel
            BouncingBallPanel ballPanel = new BouncingBallPanel();
            frame.add(ballPanel);
            
            frame.setVisible(true);
        });
    }
}

/**
 * Custom JPanel that handles the ball animation
 */
class BouncingBallPanel extends JPanel {

    // Ball properties
    private int x = 100;         // Current X position
    private int y = 100;         // Current Y position
    private final int diameter = 30; // Ball diameter
    private int dx = 2;          // X velocity
    private int dy = 2;          // Y velocity

    // Animation timer
    private final Timer timer;

    public BouncingBallPanel() {
        // Set preferred size for the panel
        this.setPreferredSize(new Dimension(400, 400));
        
        // Set up animation timer (25ms delay between frames)
        timer = new Timer(25, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updatePosition();
                repaint();
            }
        });
        timer.start();
    }

    /**
     * Update ball position and handle wall collisions
     */
    private void updatePosition() {
        int panelWidth = getWidth();
        int panelHeight = getHeight();

        // Update X position and check horizontal boundaries
        x += dx;
        if (x <= 0 || x + diameter >= panelWidth) {
            dx = -dx; // Reverse horizontal direction
            x = Math.max(0, Math.min(x, panelWidth - diameter));
        }

        // Update Y position and check vertical boundaries
        y += dy;
        if (y <= 0 || y + diameter >= panelHeight) {
            dy = -dy; // Reverse vertical direction
            y = Math.max(0, Math.min(y, panelHeight - diameter));
        }
    }

    /**
     * Custom painting of the ball and background
     */
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;

        // Set anti-aliasing for smoother edges
        g2d.setRenderingHint(
            RenderingHints.KEY_ANTIALIASING,
            RenderingHints.VALUE_ANTIALIAS_ON
        );

        // Draw background
        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, getWidth(), getHeight());

        // Draw bouncing ball
        g2d.setColor(Color.RED);
        g2d.fillOval(x, y, diameter, diameter);

        // Draw container border
        g2d.setColor(Color.BLACK);
        g2d.drawRect(0, 0, getWidth() - 1, getHeight() - 1);
    }
}
