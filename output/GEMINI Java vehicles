```java
// Declaração de uma classe abstrata chamada Vehicle.
// Classes abstratas não podem ser instanciadas diretamente e servem como um modelo para outras classes.
abstract class Vehicle {

    // Variáveis de instância protegidas, o que significa que são acessíveis dentro da classe Vehicle,
    // suas subclasses e classes dentro do mesmo pacote.
    protected String make;     // Marca do veículo
    protected String model;    // Modelo do veículo
    protected int year;       // Ano de fabricação do veículo
    protected String fuelType; // Tipo de combustível que o veículo utiliza

    // Construtor da classe Vehicle. É chamado quando uma instância de uma subclasse de Vehicle é criada.
    public Vehicle(String make, String model, int year, String fuelType) {
        // Inicializa as variáveis de instância com os valores fornecidos.
        this.make = make;
        this.model = model;
        this.year = year;
        this.fuelType = fuelType;
    }

    // Declaração de um método abstrato chamado displayDetails.
    // Classes abstratas devem implementar este método.
    public abstract void displayDetails();

    // Método concreto (não abstrato) que pode ser herdado pelas subclasses.
    public void startEngine() {
        System.out.println("Starting the engine of " + make + " " + model);
    }

    // Outro método concreto que também pode ser herdado pelas subclasses.
    public void stopEngine() {
        System.out.println("Stopping the engine of " + make + " " + model);
    }
}

// Declaração de uma classe chamada LandVehicle que herda da classe Vehicle.
// Isso significa que LandVehicle terá acesso aos membros não privados de Vehicle.
class LandVehicle extends Vehicle {
    // Variáveis de instância específicas para veículos terrestres.
    protected int numberOfWheels;   // Número de rodas do veículo terrestre
    protected String transmissionType; // Tipo de transmissão do veículo terrestre

    // Construtor da classe LandVehicle. Chama o construtor da superclasse (Vehicle) usando 'super()'.
    public LandVehicle(String make, String model, int year, String fuelType,
                       int numberOfWheels, String transmissionType) {
        super(make, model, year, fuelType); // Chama o construtor de Vehicle para inicializar as propriedades básicas.
        this.numberOfWheels = numberOfWheels;
        this.transmissionType = transmissionType;
    }

    // Implementação do método abstrato displayDetails herdado de Vehicle.
    @Override
    public void displayDetails() {
        System.out.println("Land Vehicle: " + year + " " + make + " " + model);
        System.out.println("Fuel Type: " + fuelType);
        System.out.println("Wheels: " + numberOfWheels);
        System.out.println("Transmission: " + transmissionType);
    }
}

// Declaração de uma classe chamada WaterVehicle que também herda de Vehicle.
class WaterVehicle extends Vehicle {
    // Variáveis de instância específicas para veículos aquáticos.
    protected boolean hasSail;     // Indica se o veículo aquático possui vela
    protected double displacement; // Deslocamento do veículo aquático em toneladas

    // Construtor da classe WaterVehicle.
    public WaterVehicle(String make, String model, int year, String fuelType,
                        boolean hasSail, double displacement) {
        super(make, model, year, fuelType);
        this.hasSail = hasSail;
        this.displacement = displacement;
    }

    // Implementação do método abstrato displayDetails para veículos aquáticos.
    @Override
    public void displayDetails() {
        System.out.println("Water Vehicle: " + year + " " + make + " " + model);
        System.out.println("Fuel Type: " + fuelType);
        System.out.println("Has Sail: " + (hasSail ? "Yes" : "No")); // Usa operador ternário para exibir "Yes" ou "No".
        System.out.println("Displacement: " + displacement + " tons");
    }

    // Método específico para veículos aquáticos.
    public void dropAnchor() {
        System.out.println("Dropping anchor for " + make + " " + model);
    }
}

// Declaração de uma classe chamada AirVehicle que herda de Vehicle.
class AirVehicle extends Vehicle {
    // Variáveis de instância específicas para veículos aéreos.
    protected int maxAltitude; // Altitude máxima que o veículo aéreo pode alcançar em pés
    protected int engineCount; // Número de motores do veículo aéreo

    // Construtor da classe AirVehicle.
    public AirVehicle(String make, String model, int year, String fuelType,
                       int maxAltitude, int engineCount) {
        super(make, model, year, fuelType);
        this.maxAltitude = maxAltitude;
        this.engineCount = engineCount;
    }

    // Implementação do método abstrato displayDetails para veículos aéreos.
    @Override
    public void displayDetails() {
        System.out.println("Air Vehicle: " + year + " " + make + " " + model);
        System.out.println("Fuel Type: " + fuelType);
        System.out.println("Max Altitude: " + maxAltitude + " ft");
        System.out.println("Engine Count: " + engineCount);
    }

    // Método específico para veículos aéreos.
    public void takeOff() {
        System.out.println(make + " " + model + " is taking off!");
    }
}

// Declaração de uma classe chamada Car que herda de LandVehicle.
// Isso demonstra herança em múltiplos níveis.
class Car extends LandVehicle {
    // Variáveis de instância específicas para carros.
    private int doorCount;   // Número de portas do carro (private significa que só é acessível dentro da classe Car)
    private String bodyStyle; // Estilo da carroceria do carro

    // Construtor da classe Car. Chama o construtor da superclasse (LandVehicle).
    public Car(String make, String model, int year, String fuelType,
               String transmissionType, int doorCount, String bodyStyle) {
        super(make, model, year, fuelType, 4, transmissionType); // Chama o construtor de LandVehicle, fixando o número de rodas em 4.
        this.doorCount = doorCount;
        this.bodyStyle = bodyStyle;
    }

    // Sobrescrita do método displayDetails para incluir detalhes específicos do carro.
    @Override
    public void displayDetails() {
        super.displayDetails(); // Chama o displayDetails da superclasse (LandVehicle) para exibir informações básicas do veículo terrestre.
        System.out.println("Doors: " + doorCount);
        System.out.println("Body Style: " + bodyStyle);
    }

    // Método específico para carros.
    public void honkHorn() {
        System.out.println("Honk! Honk! from " + make + " " + model);
    }
}

// Classe principal que contém o método main para executar o programa.
public class VehicleDemo {
    public static void main(String[] args) {
        // Cria instâncias de diferentes tipos de veículos.
        Car myCar = new Car("Toyota", "Camry", 2022, "Gasoline",
                            "Automatic", 4, "Sedan");

        WaterVehicle myBoat = new WaterVehicle("Bayliner", "Element", 2021,
                                               "Diesel", false, 1.8);

        AirVehicle myPlane = new AirVehicle("Cessna", "172", 2020,
                                             "Avgas", 13000, 1);

        // Demonstra a funcionalidade dos objetos criados.
        System.out.println("----- Car Details -----");
        myCar.displayDetails();
        myCar.startEngine();
        myCar.honkHorn();
        myCar.stopEngine();

        System.out.println("\n----- Boat Details -----");
        myBoat.displayDetails();
        myBoat.startEngine();
        myBoat.dropAnchor();
        myBoat.stopEngine();

        System.out.println("\n----- Plane Details -----");
        myPlane.displayDetails();
        myPlane.startEngine();
        myPlane.takeOff();
        myPlane.stopEngine();
    }
}
```
