// Classe abstrata base que representa um veículo genérico
abstract class Vehicle {

    // Atributos comuns a todos os veículos
    protected String make;        // Marca do veículo
    protected String model;       // Modelo do veículo
    protected int year;           // Ano de fabricação
    protected String fuelType;    // Tipo de combustível (ex: Gasolina, Diesel, etc.)

    /**
     * Construtor para inicializar os dados básicos do veículo
     */
    public Vehicle(String make, String model, int year, String fuelType) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.fuelType = fuelType;
    }

    /**
     * Método abstrato que deve ser implementado por todas as subclasses
     * para exibir os detalhes específicos do veículo
     */
    public abstract void displayDetails();

    /**
     * Método comum para iniciar o motor do veículo
     */
    public void startEngine() {
        System.out.println("Starting the engine of " + make + " " + model);
    }

    /**
     * Método comum para desligar o motor do veículo
     */
    public void stopEngine() {
        System.out.println("Stopping the engine of " + make + " " + model);
    }
}

// Classe que representa veículos terrestres, herda de Vehicle
class LandVehicle extends Vehicle {
    protected int numberOfWheels;      // Quantidade de rodas
    protected String transmissionType; // Tipo de transmissão (ex: automática, manual)

    /**
     * Construtor para veículos terrestres
     */
    public LandVehicle(String make, String model, int year, String fuelType,
                      int numberOfWheels, String transmissionType) {
        super(make, model, year, fuelType);
        this.numberOfWheels = numberOfWheels;
        this.transmissionType = transmissionType;
    }

    /**
     * Implementação do método abstrato para exibir detalhes do veículo terrestre
     */
    @Override
    public void displayDetails() {
        System.out.println("Land Vehicle: " + year + " " + make + " " + model);
        System.out.println("Fuel Type: " + fuelType);
        System.out.println("Wheels: " + numberOfWheels);
        System.out.println("Transmission: " + transmissionType);
    }
}

// Classe que representa veículos aquáticos, herda de Vehicle
class WaterVehicle extends Vehicle {
    protected boolean hasSail;     // Indica se o veículo possui vela
    protected double displacement; // Deslocamento do barco em toneladas

    /**
     * Construtor para veículos aquáticos
     */
    public WaterVehicle(String make, String model, int year, String fuelType,
                       boolean hasSail, double displacement) {
        super(make, model, year, fuelType);
        this.hasSail = hasSail;
        this.displacement = displacement;
    }

    /**
     * Implementação do método abstrato para exibir detalhes do veículo aquático
     */
    @Override
    public void displayDetails() {
        System.out.println("Water Vehicle: " + year + " " + make + " " + model);
        System.out.println("Fuel Type: " + fuelType);
        System.out.println("Has Sail: " + (hasSail ? "Yes" : "No"));
        System.out.println("Displacement: " + displacement + " tons");
    }

    /**
     * Método específico para veículos aquáticos — soltar âncora
     */
    public void dropAnchor() {
        System.out.println("Dropping anchor for " + make + " " + model);
    }
}

// Classe que representa veículos aéreos, herda de Vehicle
class AirVehicle extends Vehicle {
    protected int maxAltitude;  // Altitude máxima em pés
    protected int engineCount;  // Quantidade de motores

    /**
     * Construtor para veículos aéreos
     */
    public AirVehicle(String make, String model, int year, String fuelType,
                     int maxAltitude, int engineCount) {
        super(make, model, year, fuelType);
        this.maxAltitude = maxAltitude;
        this.engineCount = engineCount;
    }

    /**
     * Implementação do método abstrato para exibir detalhes do veículo aéreo
     */
    @Override
    public void displayDetails() {
        System.out.println("Air Vehicle: " + year + " " + make + " " + model);
        System.out.println("Fuel Type: " + fuelType);
        System.out.println("Max Altitude: " + maxAltitude + " ft");
        System.out.println("Engine Count: " + engineCount);
    }

    /**
     * Método específico para veículos aéreos — decolar
     */
    public void takeOff() {
        System.out.println(make + " " + model + " is taking off!");
    }
}

// Subclasse de LandVehicle que representa um carro
class Car extends LandVehicle {
    private int doorCount;     // Número de portas
    private String bodyStyle;  // Estilo da carroceria (ex: Sedan, Hatchback)

    /**
     * Construtor específico para um carro
     */
    public Car(String make, String model, int year, String fuelType,
              String transmissionType, int doorCount, String bodyStyle) {
        super(make, model, year, fuelType, 4, transmissionType); // Todos os carros têm 4 rodas
        this.doorCount = doorCount;
        this.bodyStyle = bodyStyle;
    }

    /**
     * Exibe os detalhes do carro, incluindo os herdados e os específicos
     */
    @Override
    public void displayDetails() {
        super.displayDetails(); // Chama o método da superclasse
        System.out.println("Doors: " + doorCount);
        System.out.println("Body Style: " + bodyStyle);
    }

    /**
     * Método específico para o carro — buzinar
     */
    public void honkHorn() {
        System.out.println("Honk! Honk! from " + make + " " + model);
    }
}

// Classe principal para demonstrar o uso das classes de veículos
public class VehicleDemo {
    public static void main(String[] args) {

        // Cria um objeto do tipo Carro
        Car myCar = new Car("Toyota", "Camry", 2022, "Gasoline",
                           "Automatic", 4, "Sedan");

        // Cria um objeto do tipo Veículo Aquático
        WaterVehicle myBoat = new WaterVehicle("Bayliner", "Element", 2021,
                                            "Diesel", false, 1.8);

        // Cria um objeto do tipo Veículo Aéreo
        AirVehicle myPlane = new AirVehicle("Cessna", "172", 2020,
                                          "Avgas", 13000, 1);

        // Exibe os detalhes e ações do carro
        System.out.println("----- Car Details -----");
        myCar.displayDetails();
        myCar.startEngine();
        myCar.honkHorn();
        myCar.stopEngine();

        // Exibe os detalhes e ações do barco
        System.out.println("\n----- Boat Details -----");
        myBoat.displayDetails();
        myBoat.startEngine();
        myBoat.dropAnchor();
        myBoat.stopEngine();

        // Exibe os detalhes e ações do avião
        System.out.println("\n----- Plane Details -----");
        myPlane.displayDetails();
        myPlane.startEngine();
        myPlane.takeOff();
        myPlane.stopEngine();
    }
}
