import numpy as np
import matplotlib.pyplot as plt
import sympy as sp

def derive_and_plot():
   """
   Main function to demonstrate equation derivation and plotting.
   Finds the derivative of a cubic polynomial and visualizes both
   the original function and its derivative.
   """

   # Define the symbolic variable for mathematical operations
   x = sp.Symbol('x')

   # Define the cubic polynomial equation
   equation = x**3 - 2*x**2 + 5*x - 3
   
   # Calculate the first derivative
   derivative = sp.diff(equation, x)

   print("Original equation:", equation)
   print("First derivative:", derivative)

   # Convert symbolic expressions to numerical functions
   # for efficient computation with numpy arrays
   f = sp.lambdify(x, equation, 'numpy')
   df = sp.lambdify(x, derivative, 'numpy')
   
   # Create evenly spaced x values for plotting
   x_vals = np.linspace(-5, 5, 400)
   
   # Calculate function values for both original and derivative
   y_vals = f(x_vals)
   dy_vals = df(x_vals)

   # Create a figure with two subplots side by side
   plt.figure(figsize=(12, 6))

   # Left subplot: Original function
   plt.subplot(1, 2, 1)
   plt.plot(x_vals, y_vals, label=f'f(x) = {equation}', color='blue')
   plt.title('Original Function')
   plt.xlabel('x')
   plt.ylabel('f(x)')
   plt.grid(True)
   plt.legend()

   # Right subplot: Derivative function
   plt.subplot(1, 2, 2)
   plt.plot(x_vals, dy_vals, label=f"f'(x) = {derivative}", color='red')
   plt.title('First Derivative')
   plt.xlabel('x')
   plt.ylabel("f'(x)")
   plt.grid(True)
   plt.legend()

   # Adjust spacing between subplots
   plt.tight_layout()
   plt.show()