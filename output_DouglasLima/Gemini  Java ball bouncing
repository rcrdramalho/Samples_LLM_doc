import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * BouncingBallAnimation - Creates a window with a ball bouncing inside a square panel.
 */
public class BouncingBallAnimation {

    public static void main(String[] args) {
        // Use SwingUtilities.invokeLater for thread safety when updating the GUI.
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Bouncing Ball");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(400, 400);

            BouncingBallPanel ballPanel = new BouncingBallPanel();
            frame.add(ballPanel);

            frame.setVisible(true);
        });
    }
}

/**
 * BouncingBallPanel - Custom JPanel that handles the ball animation.
 * It manages the ball's position, velocity, and collision detection,
 * and repaints the panel to show the ball's movement.
 */
class BouncingBallPanel extends JPanel {

    private int x = 100; // Initial X position of the ball.
    private int y = 100; // Initial Y position of the ball.
    private final int diameter = 30; // Diameter of the bouncing ball (final as it doesn't change).
    private int dx = 2;     // Velocity in the X direction (pixels per update).
    private int dy = 2;     // Velocity in the Y direction (pixels per update).

    private final Timer timer; // Swing Timer to control the animation updates.

    /**
     * Constructor for the BouncingBallPanel.
     * Sets the preferred size of the panel and initializes the animation timer.
     * The timer triggers an action event at regular intervals to update the ball's position and repaint the panel.
     */
    public BouncingBallPanel() {
        this.setPreferredSize(new Dimension(400, 400));

        // Initialize a Timer to trigger animation updates.
        timer = new Timer(25, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updatePosition(); // Update the ball's position.
                repaint();        // Request a repaint of the panel to draw the ball in its new position.
            }
        });
        timer.start(); // Start the animation timer.
    }

    /**
     * updatePosition - Updates the ball's x and y coordinates based on its velocity (dx and dy).
     * It also detects collisions with the panel boundaries and reverses the corresponding velocity component.
     * This ensures the ball bounces off the edges of the panel.
     */
    private void updatePosition() {
        int panelWidth = getWidth();
        int panelHeight = getHeight();

        x += dx;
        // Check for collision with the left or right boundaries.
        if (x <= 0 || x + diameter >= panelWidth) {
            dx = -dx; // Reverse the horizontal direction.
            // Ensure the ball stays within the bounds after reversal.
            x = Math.max(0, Math.min(x, panelWidth - diameter));
        }

        y += dy;
        // Check for collision with the top or bottom boundaries.
        if (y <= 0 || y + diameter >= panelHeight) {
            dy = -dy; // Reverse the vertical direction.
            // Ensure the ball stays within the bounds after reversal.
            y = Math.max(0, Math.min(y, panelHeight - diameter));
        }
    }

    /**
     * paintComponent - Overrides the paintComponent method of JPanel to handle custom drawing.
     * It first calls the superclass's paintComponent to ensure proper background drawing,
     * then draws the bouncing ball and the border of the panel.
     * @param g the Graphics context used for drawing.
     */
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); // Call superclass's paintComponent to handle background.
        Graphics2D g2d = (Graphics2D) g; // Cast to Graphics2D for more advanced drawing options.

        // Enable anti-aliasing for smoother drawing of shapes.
        g2d.setRenderingHint(
                RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON
        );

        // Draw the background of the panel.
        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, getWidth(), getHeight());

        // Draw the bouncing ball.
        g2d.setColor(Color.RED);
        g2d.fillOval(x, y, diameter, diameter);

        // Draw a black border around the panel.
        g2d.setColor(Color.BLACK);
        g2d.drawRect(0, 0, getWidth() - 1, getHeight() - 1);
    }
}