import pandas as pd
from sklearn.tree import DecisionTreeClassifier, export_text, plot_tree
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt

def create_decision_tree():
    """
    Main function to create and visualize a decision tree classifier
    based on weather conditions to predict an outcome (1 or 0).

    This function performs the following steps:
    1. Creates a sample dataset using a Pandas DataFrame.
    2. Preprocesses categorical features (Weather, Wind, Temperature)
       by converting them into numerical representations using Label Encoding.
    3. Initializes and trains a Decision Tree Classifier using the encoded features
       and the 'Output' as the target variable.
    4. Visualizes the trained decision tree in two ways:
       - As a text-based representation of the decision rules.
       - As a graphical plot of the tree structure.
    5. Demonstrates how to make predictions on new, unseen data by first encoding
       the categorical features of the new data using the fitted encoders.
    """

    # Step 1: Create Sample Dataset
    # ----------------------------
    # DataFrame containing weather conditions and a binary output.
    data = {
        'Weather': ['Sunny', 'Sunny', 'Cloudy', 'Rainy', 'Rainy', 'Cloudy', 'Sunny',
                    'Cloudy', 'Rainy', 'Sunny', 'Rainy', 'Cloudy', 'Cloudy', 'Sunny'],
        'Wind': ['Weak', 'Strong', 'Weak', 'Weak', 'Strong', 'Strong', 'Weak',
                 'Strong', 'Strong', 'Weak', 'Weak', 'Weak', 'Strong', 'Weak'],
        'Temperature': ['Hot', 'Hot', 'Mild', 'Mild', 'Cool', 'Cool', 'Mild',
                        'Hot', 'Mild', 'Cool', 'Mild', 'Hot', 'Mild', 'Mild'],
        'Output': [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1]
    }

    # Convert the dictionary to a Pandas DataFrame for easier manipulation.
    df = pd.DataFrame(data)
    print("Original Dataset:")
    print(df)
    print("\n")

    # Step 2: Preprocess the Data
    # ---------------------------
    # Convert categorical features to numerical values using Label Encoding.
    # This is necessary because most machine learning algorithms work with numerical input.

    # Initialize LabelEncoder instances for each categorical column.
    weather_encoder = LabelEncoder()
    wind_encoder = LabelEncoder()
    temp_encoder = LabelEncoder()

    # Fit the encoders to the unique values in each categorical column and
    # transform the original columns into their numerical representations.
    df['Weather_encoded'] = weather_encoder.fit_transform(df['Weather'])
    df['Wind_encoded'] = wind_encoder.fit_transform(df['Wind'])
    df['Temperature_encoded'] = temp_encoder.fit_transform(df['Temperature'])

    # Print the mapping of the original categorical values to their encoded numerical values.
    # This helps in understanding the encoded data.
    print("Weather classes:", list(weather_encoder.classes_))
    print("Wind classes:", list(wind_encoder.classes_))
    print("Temperature classes:", list(temp_encoder.classes_))
    print("\n")

    # Prepare the feature matrix (X) and the target vector (y).
    # X contains the encoded categorical features used for prediction.
    # y contains the 'Output' column, which is the target variable we want to predict.
    X = df[['Weather_encoded', 'Wind_encoded', 'Temperature_encoded']]
    y = df['Output']

    # Step 3: Create and Train Decision Tree
    # -------------------------------------
    # Initialize the Decision Tree Classifier.
    # Parameters used:
    # - max_depth: limits the depth of the tree to prevent overfitting and improve interpretability.
    # - random_state: ensures reproducibility of the tree structure.
    tree_clf = DecisionTreeClassifier(max_depth=3, random_state=42)

    # Train the decision tree model using the encoded features (X) and the target variable (y).
    tree_clf.fit(X, y)

    # Step 4: Visualize the Decision Tree
    # -----------------------------------
    # Visualize the trained decision tree to understand the decision-making process.

    # Option 1: Text Representation
    # Export the decision tree rules as text. This provides a textual view of the decision logic.
    tree_rules = export_text(tree_clf,
                                   feature_names=['Weather', 'Wind', 'Temperature'])
    print("Decision Tree Rules:")
    print(tree_rules)

    # Option 2: Graphical Visualization
    # Plot the decision tree graphically using matplotlib.
    plt.figure(figsize=(12, 8))
    plot_tree(tree_clf,
              feature_names=['Weather', 'Wind', 'Temperature'],
              class_names=['Unfavorable', 'Favorable'],
              filled=True,      # Fill the nodes with color indicating the majority class
              rounded=True)   # Use rounded corners for better visual appeal
    plt.title("Decision Tree Visualization")
    plt.show()

    # Step 5: Make Predictions with New Data
    # -------------------------------------
    # Demonstrate how to use the trained decision tree to predict the output for new data points.
    # It's crucial to encode the new data using the same fitted LabelEncoders.

    # Example 1: Predict the output for 'Sunny', 'Weak' wind, and 'Mild' temperature.
    new_data1_encoded = [[weather_encoder.transform(['Sunny'])[0],
                          wind_encoder.transform(['Weak'])[0],
                          temp_encoder.transform(['Mild'])[0]]]
    prediction1 = tree_clf.predict(new_data1_encoded)
    print("\nPrediction for [Sunny, Weak, Mild]:", prediction1[0])

    # Example 2: Predict the output for 'Rainy', 'Strong' wind, and 'Cool' temperature.
    new_data2_encoded = [[weather_encoder.transform(['Rainy'])[0],
                          wind_encoder.transform(['Strong'])[0],
                          temp_encoder.transform(['Cool'])[0]]]
    prediction2 = tree_clf.predict(new_data2_encoded)
    print("Prediction for [Rainy, Strong, Cool]:", prediction2[0])

# Call the main function to execute the decision tree creation and visualization.
if __name__ == "__main__":
    create_decision_tree()