#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// Define the maximum number of patients the queue can hold.
#define MAX_PATIENTS 100

// Define an enumeration for patient priority levels.
typedef enum {
    CRITICAL,  // Highest priority
    SERIOUS,
    MODERATE,
    MINOR      // Lowest priority
} Priority;

// Define a structure to represent a patient.
typedef struct {
    char name[50];       // Patient's name (up to 49 characters + null terminator)
    int age;            // Patient's age
    Priority priority;    // Patient's priority level
    time_t arrival_time; // Time when the patient arrived (Unix timestamp)
} Patient;

// Define a structure to represent a priority queue of patients.
typedef struct {
    Patient patients[MAX_PATIENTS]; // Array to store patients
    int size;                      // Current number of patients in the queue
} PriorityQueue;

/**
 * @brief Initializes an empty priority queue.
 * @param pq Pointer to the PriorityQueue structure to initialize.
 */
void init_queue(PriorityQueue *pq) {
    pq->size = 0;
}

/**
 * @brief Checks if the priority queue is empty.
 * @param pq Pointer to the PriorityQueue structure to check.
 * @return 1 if the queue is empty, 0 otherwise.
 */
int is_empty(PriorityQueue *pq) {
    return pq->size == 0;
}

/**
 * @brief Checks if the priority queue is full.
 * @param pq Pointer to the PriorityQueue structure to check.
 * @return 1 if the queue is full, 0 otherwise.
 */
int is_full(PriorityQueue *pq) {
    return pq->size == MAX_PATIENTS;
}

/**
 * @brief Enqueues a patient into the priority queue based on their priority.
 * Higher priority patients are placed towards the front of the queue.
 * @param pq Pointer to the PriorityQueue structure.
 * @param patient The Patient structure to add to the queue.
 */
void enqueue(PriorityQueue *pq, Patient patient) {
    if (is_full(pq)) {
        printf("Queue is full. Cannot add more patients.\n");
        return;
    }

    int i;
    // Iterate backwards through the queue to find the correct position for the new patient.
    for (i = pq->size - 1; i >= 0; i--) {
        // If the new patient's priority is higher (numerically smaller enum value)
        // than the current patient's priority, shift the current patient to the right.
        if (patient.priority < pq->patients[i].priority) {
            pq->patients[i + 1] = pq->patients[i];
        } else {
            // If the new patient's priority is lower or equal, the correct position is found.
            break;
        }
    }

    // Insert the new patient at the found position (i + 1).
    pq->patients[i + 1] = patient;
    pq->size++;
}

/**
 * @brief Dequeues the patient with the highest priority from the front of the queue.
 * @param pq Pointer to the PriorityQueue structure.
 * @return The Patient structure with the highest priority. Returns an empty patient
 * if the queue is empty.
 */
Patient dequeue(PriorityQueue *pq) {
    if (is_empty(pq)) {
        printf("Queue is empty.\n");
        Patient empty = {"", 0, MINOR, 0}; // Return an empty patient if the queue is empty.
        return empty;
    }

    // The patient with the highest priority is at the front of the queue (index 0).
    Patient patient = pq->patients[0];

    // Shift all remaining patients one position to the left to fill the gap.
    for (int i = 1; i < pq->size; i++) {
        pq->patients[i - 1] = pq->patients[i];
    }

    pq->size--;
    return patient;
}

/**
 * @brief Displays the current patients in the priority queue.
 * @param pq Pointer to the PriorityQueue structure to display.
 */
void display_queue(PriorityQueue *pq) {
    if (is_empty(pq)) {
        printf("No patients in the queue.\n");
        return;
    }

    printf("\nCurrent Hospital Queue:\n");
    printf("-------------------------------------------------\n");
    printf("| %-20s | %-3s | %-10s | %-10s |\n", "Name", "Age", "Priority", "Arrival Time");
    printf("-------------------------------------------------\n");

    for (int i = 0; i < pq->size; i++) {
        char priority_str[10];
        switch (pq->patients[i].priority) {
            case CRITICAL: strcpy(priority_str, "Critical"); break;
            case SERIOUS: strcpy(priority_str, "Serious"); break;
            case MODERATE: strcpy(priority_str, "Moderate"); break;
            case MINOR: strcpy(priority_str, "Minor"); break;
        }

        char time_str[20];
        // Format the arrival time into a human-readable string (HH:MM:SS).
        strftime(time_str, sizeof(time_str), "%H:%M:%S", localtime(&pq->patients[i].arrival_time));

        printf("| %-20s | %-3d | %-10s | %-10s |\n",
               pq->patients[i].name,
               pq->patients[i].age,
               priority_str,
               time_str);
    }
    printf("-------------------------------------------------\n");
}

/**
 * @brief Generates a patient with random attributes for simulation purposes.
 * @return A Patient structure with randomly generated name, age, priority, and arrival time.
 */
Patient generate_random_patient() {
    const char *names[] = {"John Doe", "Jane Smith", "Robert Johnson", "Emily Davis",
                             "Michael Brown", "Sarah Wilson", "David Taylor", "Jessica Anderson"};
    const int num_names = sizeof(names) / sizeof(names[0]);

    Patient p;
    strcpy(p.name, names[rand() % num_names]); // Assign a random name.
    p.age = 1 + rand() % 100;                 // Assign a random age between 1 and 100.
    p.priority = rand() % 4;                  // Assign a random priority (0-3).
    p.arrival_time = time(NULL);              // Set the arrival time to the current time.

    return p;
}

/**
 * @brief Main function of the hospital priority queue system.
 * Provides a menu-driven interface for adding, processing, viewing,
 * and adding random patients to the queue.
 * @return 0 if the program executes successfully.
 */
int main() {
    PriorityQueue pq;
    init_queue(&pq); // Initialize the priority queue.
    srand(time(NULL)); // Seed the random number generator.

    int choice;
    do {
        printf("\nHospital Priority Queue System\n");
        printf("1. Add Patient\n");
        printf("2. Add Random Patient (for simulation)\n");
        printf("3. Process Next Patient\n");
        printf("4. View Current Queue\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: { // Add a new patient manually.
                if (is_full(&pq)) {
                    printf("Queue is full. Cannot add more patients.\n");
                    break;
                }

                Patient p;
                printf("Enter patient name: ");
                scanf(" %[^\n]", p.name); // Read the entire line for the name.
                printf("Enter patient age: ");
                scanf("%d", &p.age);
                printf("Enter priority (0-Critical, 1-Serious, 2-Moderate, 3-Minor): ");
                scanf("%d", (int*)&p.priority); // Read the priority as an integer and cast to enum.
                p.arrival_time = time(NULL);   // Set the arrival time to the current time.

                enqueue(&pq, p);
                printf("Patient added to the queue.\n");
                break;
            }

            case 2: { // Add a randomly generated patient for simulation.
                Patient p = generate_random_patient();
                enqueue(&pq, p);
                printf("Random patient added to the queue.\n");
                break;
            }

            case 3: { // Process the next patient (highest priority).
                if (is_empty(&pq)) {
                    printf("No patients in the queue.\n");
                } else {
                    Patient p = dequeue(&pq);
                    char priority_str[10];
                    switch (p.priority) {
                        case CRITICAL: strcpy(priority_str, "Critical"); break;
                        case SERIOUS: strcpy(priority_str, "Serious"); break;
                        case MODERATE: strcpy(priority_str, "Moderate"); break;
                        case MINOR: strcpy(priority_str, "Minor"); break;
                    }

                    char time_str[20];
                    strftime(time_str, sizeof(time_str), "%H:%M:%S", localtime(&p.arrival_time));

                    printf("\nProcessing patient:\n");
                    printf("Name: %s\n", p.name);
                    printf("Age: %d\n", p.age);
                    printf("Priority: %s\n", priority_str);
                    printf("Arrival Time: %s\n", time_str);
                }
                break;
            }

            case 4: // View the current state of the priority queue.
                display_queue(&pq);
                break;

            case 5: // Exit the program.
                printf("Exiting...\n");
                break;

            default: // Handle invalid user input.
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 5); // Continue the loop until the user chooses to exit.

    return 0;
}