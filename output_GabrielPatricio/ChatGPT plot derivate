import numpy as np
import matplotlib.pyplot as plt
import sympy as sp

def derive_and_plot():
    """
    Gera a função original e sua derivada, 
    e plota ambas lado a lado para visualização.
    """

    x = sp.Symbol('x')  # Define variável simbólica

    equation = x**3 - 2*x**2 + 5*x - 3  # Define a função polinomial

    derivative = sp.diff(equation, x)  # Calcula a primeira derivada da função

    # Converte expressões simbólicas para funções numéricas usando NumPy
    f = sp.lambdify(x, equation, 'numpy')
    df = sp.lambdify(x, derivative, 'numpy')
    
    x_vals = np.linspace(-5, 5, 400)  # Intervalo de valores para o eixo x
    
    y_vals = f(x_vals)     # Avaliação da função original
    dy_vals = df(x_vals)   # Avaliação da derivada

    plt.figure(figsize=(12, 6))  # Cria figura com dois subgráficos

    # Gráfico da função original
    plt.subplot(1, 2, 1)
    plt.plot(x_vals, y_vals, label=f'f(x) = {equation}', color='blue')
    plt.title('Original Function')
    plt.xlabel('x')
    plt.ylabel('f(x)')
    plt.grid(True)
    plt.legend()

    # Gráfico da primeira derivada
    plt.subplot(1, 2, 2)
    plt.plot(x_vals, dy_vals, label=f"f'(x) = {derivative}", color='red')
    plt.title('First Derivative')
    plt.xlabel('x')
    plt.ylabel("f'(x)")
    plt.grid(True)
    plt.legend()

    plt.tight_layout()  # Ajusta espaçamento entre subplots
    plt.show()
