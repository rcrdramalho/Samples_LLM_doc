// Classe abstrata base para todos os tipos de veículos
abstract class Vehicle {
    protected String make;     // Marca do veículo (ex: Ford, Toyota)
    protected String model;    // Modelo do veículo (ex: Fiesta, Corolla)
    protected int year;        // Ano de fabricação
    protected String fuelType; // Tipo de combustível (Gasolina, Diesel, etc)
    
    public Vehicle(String make, String model, int year, String fuelType) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.fuelType = fuelType;
    }

    // Método abstrato - deve ser implementado pelas subclasses
    public abstract void displayDetails();

    // Métodos concretos comuns a todos os veículos
    public void startEngine() {
        System.out.println("Starting the engine of " + make + " " + model);
    }

    public void stopEngine() {
        System.out.println("Stopping the engine of " + make + " " + model);
    }
}

// Classe para veículos terrestres (herda de Vehicle)
class LandVehicle extends Vehicle {
    protected int numberOfWheels;    // Quantidade de rodas
    protected String transmissionType; // Tipo de transmissão (Manual/Automático)
    
    public LandVehicle(String make, String model, int year, String fuelType, 
                      int numberOfWheels, String transmissionType) {
        super(make, model, year, fuelType);  // Chama construtor da classe pai
        this.numberOfWheels = numberOfWheels;
        this.transmissionType = transmissionType;
    }
    
    @Override
    public void displayDetails() {
        System.out.println("Land Vehicle: " + year + " " + make + " " + model);
        System.out.println("Fuel Type: " + fuelType);
        System.out.println("Wheels: " + numberOfWheels);
        System.out.println("Transmission: " + transmissionType);
    }
}

// Classe para veículos aquáticos (herda de Vehicle)
class WaterVehicle extends Vehicle {
    protected boolean hasSail;      // Possui vela?
    protected double displacement;  // Deslocamento em toneladas

    public WaterVehicle(String make, String model, int year, String fuelType, 
                       boolean hasSail, double displacement) {
        super(make, model, year, fuelType);
        this.hasSail = hasSail;
        this.displacement = displacement;
    }
    
    @Override
    public void displayDetails() {
        System.out.println("Water Vehicle: " + year + " " + make + " " + model);
        System.out.println("Fuel Type: " + fuelType);
        System.out.println("Has Sail: " + (hasSail ? "Yes" : "No"));
        System.out.println("Displacement: " + displacement + " tons");
    }

    // Método específico para veículos aquáticos
    public void dropAnchor() {
        System.out.println("Dropping anchor for " + make + " " + model);
    }
}

// Classe para veículos aéreos (herda de Vehicle)
class AirVehicle extends Vehicle {
    protected int maxAltitude;   // Altitude máxima em pés
    protected int engineCount;   // Número de motores
    
    public AirVehicle(String make, String model, int year, String fuelType, 
                     int maxAltitude, int engineCount) {
        super(make, model, year, fuelType);
        this.maxAltitude = maxAltitude;
        this.engineCount = engineCount;
    }
    
    @Override
    public void displayDetails() {
        System.out.println("Air Vehicle: " + year + " " + make + " " + model);
        System.out.println("Fuel Type: " + fuelType);
        System.out.println("Max Altitude: " + maxAltitude + " ft");
        System.out.println("Engine Count: " + engineCount);
    }

    // Método específico para veículos aéreos
    public void takeOff() {
        System.out.println(make + " " + model + " is taking off!");
    }
}

// Classe concreta para carros (herda de LandVehicle)
class Car extends LandVehicle {
    private int doorCount;       // Número de portas
    private String bodyStyle;    // Estilo da carroceria (Sedan, Hatchback, etc)

    public Car(String make, String model, int year, String fuelType, 
              String transmissionType, int doorCount, String bodyStyle) {
        // Chama construtor da classe pai com número fixo de rodas (4)
        super(make, model, year, fuelType, 4, transmissionType);
        this.doorCount = doorCount;
        this.bodyStyle = bodyStyle;
    }
    
    @Override
    public void displayDetails() {
        super.displayDetails();  // Reusa implementação da classe pai
        System.out.println("Doors: " + doorCount);
        System.out.println("Body Style: " + bodyStyle);
    }

    // Método específico para carros
    public void honkHorn() {
        System.out.println("Honk! Honk! from " + make + " " + model);
    }
}

// Classe de demonstração do sistema de veículos
public class VehicleDemo {
    public static void main(String[] args) {
        // Cria instâncias de diferentes tipos de veículos
        Car myCar = new Car("Toyota", "Camry", 2022, "Gasoline", 
                           "Automatic", 4, "Sedan");
        
        WaterVehicle myBoat = new WaterVehicle("Bayliner", "Element", 2021, 
                                            "Diesel", false, 1.8);
        
        AirVehicle myPlane = new AirVehicle("Cessna", "172", 2020, 
                                          "Avgas", 13000, 1);
        
        // Demonstração do carro
        System.out.println("----- Car Details -----");
        myCar.displayDetails();
        myCar.startEngine();
        myCar.honkHorn();  // Método específico de Car
        myCar.stopEngine();
        
        // Demonstração do barco
        System.out.println("\n----- Boat Details -----");
        myBoat.displayDetails();
        myBoat.startEngine();
        myBoat.dropAnchor();  // Método específico de WaterVehicle
        myBoat.stopEngine();
        
        // Demonstração do avião
        System.out.println("\n----- Plane Details -----");
        myPlane.displayDetails();
        myPlane.startEngine();
        myPlane.takeOff();  // Método específico de AirVehicle
        myPlane.stopEngine();
    }
}